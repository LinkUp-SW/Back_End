openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/login:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user (Local)
      summary: Logs in a user (Local)
      description: >
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
        '500':
          description: Server error

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user (Local)
      summary: Logs out a user (Local)
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error


  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error

  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email.
        Generates a one-time password (OTP) and sends it to the user's email.
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
        '500':
          description: Server error

  /api/v1/user/verify-otp:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Verifies the one-time password (OTP) provided by the user.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - otp
                - email
              properties:
                otp:
                  type: string
                  example: "123456"
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: OTP is required.
        '401':
          description: Invalid OTP or OTP expired.
        '500':
          description: Server error

  /api/v1/user/verify-email:
    post:
      tags:
        - Auth
      summary: Verify Email Availability
      description: >
        Checks if the provided email is available (i.e., not already in use).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Email is available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is available"
        '400':
          description: Email already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"
        '500':
          description: Server error

  /api/v1/user/signup/starter:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Registers a new user by creating an account with the provided starter information.
        Required fields include firstName, lastName, email, password, country, and city.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - firstName
                - lastName
                - email
                - password
                - country
                - city
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "securepassword"
                country:
                  type: string
                  example: "USA"
                city:
                  type: string
                  example: "New York"
                isStudent:
                  type: boolean
                  example: false
                jobTitle:
                  type: string
                  example: "Software Engineer"
                school:
                  type: string
                  example: "MIT"
                schoolStartYear:
                  type: number
                  example: 2015
                schoolEndYear:
                  type: number
                  example: 2019
                is16OrAbove:
                  type: boolean
                  example: true
                birthDate:
                  type: string
                  format: date
                  example: "1990-01-01"
                employmentType:
                  type: string
                  example: "Full-time"
                recentCompany:
                  type: string
                  example: "Google"
      responses:
        '201':
          description: Signup successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "john.doe@example.com"
        '400':
          description: Required fields missing.
        '409':
          description: User already exists.
        '500':
          description: Server error

  /api/v1/user/forget-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: >
        Sends a password reset link to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent.
        '400':
          description: Invalid email format.
        '404':
          description: Email not registered.
        '500':
          description: Server error

  /api/v1/user/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - token
              properties:
                password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password reset successful.
        '400':
          description: Invalid request.
        '401':
          description: Invalid or expired token.
        '404':
          description: User not found.
        '500':
          description: Server error

  /api/v1/user/update-password:
    post:
      tags:
        - Auth
      summary: Update password
      description: >
        Updates the user's password using the provided old password, new password, and token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  example: "old_password"
                new_password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password updated successfully.
        '400':
          description: Invalid request.
        '401':
          description: Invalid or expired token.
        '403':
          description: Old password is incorrect.
        '404':
          description: User not found.
        '500':
          description: Server error
  /api/v1/user/update-email:
    put:
      tags:
        - User
      summary: Update user email
      description: >
        Updates the email address of an authenticated user. A valid token is required to verify the user's identity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
              properties:
                email:
                  type: string
                  example: "new.email@example.com"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Email updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
                  user_updated_email:
                    type: string
                    example: "new.email@example.com"
        '400':
          description: Email is required.
        '401':
          description: Email already exists or invalid token.
        '500':
          description: Server error.
  /api/v1/user/delete-account:
    delete:
      tags:
        - User
      summary: Delete User Account
      description: >
        Deletes the authenticated user's account from the system.
        A valid token is required to verify the user's identity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Account deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        '400':
          description: Invalid request.
        '401':
          description: Unauthorized or invalid token.
        '500':
          description: Server error
                    example: "Server error"

  /profile/profile-picture/{user_id}:
    post:
      tags:
        - Profile Picture
      summary: Upload a profile picture
      description: Uploads a profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded and updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error uploading profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error uploading profile picture
                  error:
                    type: string
                    example: Database error
    put:
      tags:
        - Profile Picture
      summary: Update a profile picture
      description: Updates the profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating profile picture
                  error:
                    type: string
                    example: Database error
    delete:
      tags:
        - Profile Picture
      summary: Delete a profile picture
      description: Deletes the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture deleted successfully"
        '400':
          description: No profile picture to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No profile picture to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this profile picture"
        '500':
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting profile picture"
                  error:
                    type: string
                    example: "Cloudinary error"
    get:
      tags:
        - Profile Picture
      summary: Get a profile picture
      description: Retrieves the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "https://cloudinary.com/user/profile_picture.jpg"
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving profile picture"
                  error:
                    type: string
                    example: "Database error"
  /profile/cover-photo/{user_id}:
    post:
      tags:
        - Cover Photo
      summary: Upload a cover photo
      description: Uploads a new cover photo for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Cover photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo uploaded and updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Cover Photo
      summary: Update a cover photo
      description: Updates the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new image file to upload.
      responses:
        '200':
          description: Cover photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/new_cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this cover photo."
        '500':
          description: Error updating cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Cover Photo
      summary: Delete a cover photo
      description: Deletes the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo deleted successfully"
        '400':
          description: No cover photo to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No cover photo to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this cover photo."
        '500':
          description: Error deleting cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    get:
      tags:
        - Cover Photo
      summary: Get a cover photo
      description: Retrieves the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '404':
          description: Cover photo not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving cover photo"
                  error:
                    type: string
                    example: "Database error"
  /profile/resume/{user_id}:
    post:
      tags:
        - Resume
      summary: Upload a resume
      description: Uploads a new resume for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The PDF file to upload.
      responses:
        '200':
          description: Resume uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume uploaded and updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Resume
      summary: Update a resume
      description: Updates the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The new PDF file to upload.
      responses:
        '200':
          description: Resume updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/new_resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this resume."
        '500':
          description: Error updating resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating resume"
                  error:
                    type: string
                    example: "Cloudinary error"

  delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        '400':
          description: No resume to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No resume to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this resume."
        '500':
          description: Error deleting resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting resume"
                  error:
                    type: string
                    example: "Cloudinary error"
<<<<<<< HEAD

  get:
=======
    get:
>>>>>>> d676fd6a30acc76849efecd2d4d345d47c66525f
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '404':
          description: Resume not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access denied
        '500':
          description: Error retrieving resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving resume"
                  error:
                    type: string
                    example: "Database error"
  /api/v1/user/update-username:
    post:
      tags:
        - Auth
      summary: Update username
      description: >
        Updates the user's username using the provided token and new username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_username
              properties:
                token:
                  type: string
                  example: "jwt_token"
                new_username:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new username are required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already in use"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/privacy/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility
      description: Retrieves the profile visibility setting for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose profile visibility is being retrieved.
      responses:
        '200':
          description: Profile visibility retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileVisibility:
                    type: string
                    example: "Public"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: User is not authorized to access this profile visibility.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
  
  # Add validate-token endpoint
  /api/v1/user/validate-token:
    get:
      tags:
        - Auth
      summary: Validate authentication token
      description: Validates if the provided JWT token is valid and not expired
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: JWT token to validate
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired token"
  # Email Update Endpoints
  /api/v1/user/update-email:
    put:
      tags:
        - User Profile
      summary: Update user email
      description: Updates the user's email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                email:
                  type: string
                  description: New email address
      responses:
        '200':
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '409':
          description: Email already in use
        '500':
          description: Server error

  # Delete Account Endpoints
  /api/v1/user/delete-account:
    delete:
      tags:
        - User Profile
      summary: Delete user account
      description: Permanently deletes user account and all associated data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  # View User Profile Endpoint
  /api/v1/user/profile/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieves a user's profile information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    # Additional user properties would be described here
        '404':
          description: User not found
        '500':
          description: Server error
  
  # Privacy Settings Endpoints
  /api/v1/user/privacy-settings/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility settings
      description: Retrieves the current profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: Privacy settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_visibility:
                    type: string
                    example: "public"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
          
    put:
      tags:
        - Privacy Settings
      summary: Update profile visibility settings
      description: Updates the profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                profile_visibility:
                  type: string
                  enum: [public, connections, private]
                  description: Profile visibility level
      responses:
        '200':
          description: Privacy settings updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Not authorized to modify these settings
        '404':
          description: User not found
        '500':
          description: Server error

  # Email Verification Endpoints
  /api/v1/user/verify-email:
    post:
      tags:
        - Auth
      summary: Verify email
      description: Verifies if an email address is available for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
      responses:
        '200':
          description: Email is available
        '409':
          description: Email already in use
        '500':
          description: Server error
          
  /api/v1/user/forget-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiates the password reset process by sending a reset link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent
        '400':
          description: Invalid email format
        '404':
          description: Email not registered
        '500':
          description: Server error
   
  # Jobs Endpoints
  /api/v1/jobs/save-jobs/{jobId}:
    post:
      tags:
        - Jobs
      summary: Save a job
      description: Saves a job to the user's saved jobs list
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: ID of the job to save
      responses:
        '200':
          description: Job saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job saved successfully"
        '400':
          description: Invalid job ID format or job already saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid job ID format" 
        '401':
          description: Unauthorized, authentication token missing or invalid
        '404':
          description: Job not found
        '500':
          description: Server error
          
  /api/v1/jobs/get-saved-jobs:
    get:
      tags:
        - Jobs
      summary: Get user's saved jobs
      description: Retrieves all jobs saved by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Saved jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized, authentication token missing or invalid
        '404':
          description: User not found
        '500':
          description: Server error
          
  /api/v1/jobs/get-top-jobs:
    get:
      tags:
        - Jobs
      summary: Get personalized job recommendations
      description: >
        Returns job recommendations based on user skills, experience, and preferences.
        Jobs are ranked by relevance to user profile.
      security:
        - bearerAuth: []
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (ID of the last item in previous page)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of jobs to return per page
      responses:
        '200':
          description: Job recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Personalized job recommendations retrieved successfully"
                  count: 
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  nextCursor:
                    type: string
                    example: "60d5ec69c5d019ab15c55555"
        '401':
          description: Unauthorized, authentication token missing or invalid
        '500':
          description: Server error
          
  /api/v1/jobs/get-jobs:
    get:
      tags:
        - Jobs
      summary: Get all jobs
      description: Retrieves all available jobs with pagination
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (ID of the last item in previous page)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of jobs to return per page
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs retrieved successfully"
                  count: 
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  nextCursor:
                    type: string
                    example: "60d5ec69c5d019ab15c55555"
        '500':
          description: Server error
          
  /api/v1/jobs/get-job/{jobId}:
    get:
      tags:
        - Jobs
      summary: Get job details
      description: Retrieves detailed information about a specific job
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: ID of the job to retrieve
      responses:
        '200':
          description: Job retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Job'
        '400':
          description: Invalid job ID format
        '404':
          description: Job not found
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs:
    get:
      tags:
        - Jobs
      summary: Filter jobs with multiple criteria
      description: Filters jobs based on multiple criteria submitted in the request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Location to filter jobs by (full or partial match)
                  example: "New York"
                experienceLevel:
                  oneOf:
                    - type: string
                      description: Single experience level to filter by
                      example: "Entry Level"
                    - type: array
                      items:
                        type: string
                      description: Multiple experience levels to filter by
                      example: ["Entry Level", "Mid-Senior Level"]
                companyId:
                  type: string
                  description: ID of the company to filter jobs by
                  example: "60d5ec69c5d019ab15c55678"
                minSalary:
                  type: number
                  description: Minimum salary to filter jobs by
                  example: 50000
                maxSalary:
                  type: number
                  description: Maximum salary to filter jobs by
                  example: 100000
      responses:
        '200':
          description: Jobs filtered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered successfully"
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid filter criteria or no filters provided
        '404':
          description: No jobs found matching the provided filters
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/location/{location}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by location
      description: Retrieves jobs filtered by a specific location
      parameters:
        - name: location
          in: path
          required: true
          schema:
            type: string
          description: Location to filter jobs by (partial match supported)
          example: "Chicago"
      responses:
        '200':
          description: Jobs filtered by location successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by location successfully"
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '404':
          description: No jobs found for this location
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/experience-level/{levels}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by experience level
      description: Retrieves jobs filtered by one or more experience levels
      parameters:
        - name: levels
          in: path
          required: true
          schema:
            type: string
          description: Comma-separated list of experience levels
          example: "Entry Level,Mid-Senior Level"
      responses:
        '200':
          description: Jobs filtered by experience levels successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by experience levels successfully"
                  count:
                    type: integer
                    example: 8
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '404':
          description: No jobs found for the selected experience levels
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/company/{companyId}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by company
      description: Retrieves jobs posted by a specific company
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
          description: ID of the company
          example: "60d5ec69c5d019ab15c55678"
      responses:
        '200':
          description: Jobs filtered by company successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by company successfully"
                  count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid company ID format
        '404':
          description: No jobs found for this company
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/salary-range/{minSalary}/{maxSalary}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by salary range
      description: Retrieves jobs within a specific salary range
      parameters:
        - name: minSalary
          in: path
          required: true
          schema:
            type: string
          description: Minimum salary (numeric value)
          example: "50000"
        - name: maxSalary
          in: path
          required: true
          schema:
            type: string
          description: Maximum salary (numeric value)
          example: "100000"
      responses:
        '200':
          description: Jobs filtered by salary range successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by salary range successfully"
                  count:
                    type: integer
                    example: 12
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid salary range or non-numeric values provided
        '404':
          description: No jobs found in this salary range
        '500':
          description: Server error
  
  /api/v1/user/follow/{user_id}:
    post:
      tags:
        - Connections
      summary: Follow a user
      description: >
        Allows a user to follow another user without requiring a connection. 
        Validates the token and checks if the viewer is allowed to follow the target user 
        based on their privacy settings, block list, and existing follow status.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to follow
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: false
      responses:
        '200':
          description: User followed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are now following this user."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfFollow:
                        value: "You cannot follow yourself."
                      alreadyFollowing:
                        value: "You are already following this user."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      blocked:
                        value: "You are blocked from following this user."
                      connectionsOnly:
                        value: "Only connections can follow this user."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error following user"

  /api/v1/user/unfollow/{user_id}:
    delete:
      tags:
        - Connections
      summary: Unfollow a user
      description: >
        Allows a user to unfollow another user. Validates the token and ensures the user is authorized to perform the action. 
        Checks if the user is currently following the target user and removes the relationship if valid.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to unfollow.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: User unfollowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You have unfollowed this user."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfUnfollow:
                        value: "You cannot unfollow yourself."
                      notFollowing:
                        value: "You are not following this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unfollowing user."
  
  /api/v1/user/my-network/network-manager/following:
    get:
      tags:
        - Network Manager
      summary: Get the following list
      description: >
        Retrieves the list of users that the authenticated user is following. 
        Excludes users who are part of the connections network.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The maximum number of items to return. Defaults to 10 if not specified.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: A cursor for pagination. Use the value from the `next_cursor` field in the previous response.
      responses:
        '200':
          description: Successfully retrieved the following list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  following:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-De-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching following list."

  /api/v1/user/my-network/network-manager/followers:
    get:
      tags:
        - Network Manager
      summary: Get the followers list
      description: >
        Retrieves the list of users who are following the authenticated user. 
        Includes additional information about whether the authenticated user is following each follower.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.

        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The maximum number of items to return. Defaults to 10 if not specified.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: A cursor for pagination. Use the value from the `next_cursor` field in the previous response.
      responses:
        '200':
          description: Successfully retrieved the followers list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        following:
                          type: boolean
                          example: true
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                  
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching followers list."
  /api/v1/user/connect/{user_id}:
    post:
      tags:
        - Connections
      summary: Send a connection request
      description: >
        Allows a user to send a connection request to another user. 
        Validates the token and ensures the user is authorized to perform the action. 
        Checks various conditions such as whether the user is blocked, already connected, or restricted by privacy settings.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to send a connection request to.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Required if the target user has set their privacy to "email".
                  example: "user@example.com"
      responses:
        '200':
          description: Connection request sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request sent successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfRequest:
                        value: "You cannot send a connection request to yourself."
                      alreadyConnected:
                        value: "You are already connected to this user."
                      emailRequired:
                        value: "Email is required to send a connection request."
                      emailMismatch:
                        value: "The provided email does not match the user's email."
                      alreadyPending:
                        value: "You have already sent a connection request to this user."
                      threeWeekRestriction:
                        value: "You cannot send another connection request to this user for 3 weeks."
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are blocked from sending a connection request to this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error sending connection request."
  /api/v1/user/my-network/invitation-manager/sent:
    get:
      tags:
        - Invitation Manager
      summary: Get sent connection requests
      description: >
        Retrieves the list of connection requests sent by the authenticated user. 
        The response includes the user details and the date the connection request was sent.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The maximum number of items to return. Defaults to 10 if not specified.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: A cursor for pagination. Use the value from the `next_cursor` field in the previous response.
      responses:
        '200':
          description: Successfully retrieved the sent connection requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sentConnections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"

                        
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                  
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching sent connections."

  /api/v1/user/my-network/invitation-manager/received:
    get:
      tags:
        - Invitation Manager
      summary: Get received connection requests
      description: >
        Retrieves the list of connection requests received by the authenticated user. 
        The response includes the user details, the date the connection request was received.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.

        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The maximum number of items to return. Defaults to 10 if not specified.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: A cursor for pagination. Use the value from the `next_cursor` field in the previous response.
      responses:
        '200':
          description: Successfully retrieved the received connection requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  receivedConnections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
                        numberOfMutualConnections:
                          type: integer
                          example: 5
                        nameOfOneMutualConnection:
                          type: string
                          example: "Jane Smith"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                         
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching received connections."

  /api/v1/user/my-network/invitation-manager/accept/{user_id}:
    post:
      tags:
        - Invitation Manager
      summary: Accept a connection request
      description: >
        Allows the authenticated user to accept a connection request from another user. 
        Updates the connections list for both users and removes the pending request.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being accepted.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request accepted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request accepted successfully"
                  connectionDate:
                    type: string
                    format: date-time
                    example: "2025-03-28T12:34:56.789Z"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending connection request from this user"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error accepting connection request"

  /api/v1/user/my-network/invite-connect/connections/{user_id}:
    get:
      tags:
        - Connections
      summary: Get connections list
      description: >
        Retrieves the list of all connections for the authenticated user. 
        The response includes user details and the date the connection was established.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connections are to be viewed 
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            description: The maximum number of items to return. Defaults to 10 if not specified.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: A cursor for pagination. Use the value from the `next_cursor` field in the previous response.
        
      responses:
        '200':
          description: Successfully retrieved the connections list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching connections"

  /api/v1/user/my-network/connections/remove/{user_id}:
    delete:
      tags:
        - Connections
      summary: Remove a connection
      description: >
        Allows the authenticated user to remove a connection with another user. 
        Updates the connections list for both users and ensures the relationship is removed.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to remove from the connections list.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection removed successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This user is not in your connections list."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing connection"
  
  /api/v1/user/my-network/invitation-manager/ignore/{user_id}:
    delete:
      tags:
        - Invitation Manager
      summary: Ignore a received connection request
      description: >
        Allows the authenticated user to ignore a received connection request from another user. 
        Removes the pending connection request from the user's received connections list.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being ignored.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request ignored successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request ignored successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No received connection request from this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error ignoring connection request"

  /api/v1/my-network/invitation-manager/withdraw/{user_id}:
    delete:
      tags:
        - Invitation Manager
      summary: Withdraw a sent connection request
      description: >
        Allows the authenticated user to withdraw a sent connection request to another user. 
        Removes the pending connection request from the user's sent connections list and the target user's received connections list.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being withdrawn.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request withdrawn successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request withdrawn successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No sent connection request to this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error withdrawing connection request" 

  /api/v1/user/block/{user_id}:
    post:
      tags:
        - Block/Unblock
      summary: Block a user
      description: >
        Allows the authenticated user to block another user. 
        Removes the blocked user from the connections, followers, following, sent connections, and received connections lists.
        Prevents the blocked user from interacting with the authenticated user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to block.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: User blocked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User blocked successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfBlock:
                        value: "You cannot block yourself."
                      alreadyBlocked:
                        value: "This user is already blocked."
                      recentlyUnblocked:
                        value: "You cannot reblock this user within 48 hours of unblocking."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error blocking user"

  /api/v1/user/manage-by-blocked-list/unblock/{user_id}:
    delete:
      tags:
        - Block/Unblock
      summary: Unblock a user
      description: >
        Allows the authenticated user to unblock a previously blocked user. 
        Requires the user's password for verification. Adds the unblocked user to the `unblocked_users` list with the current date.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to unblock.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The password of the authenticated user for verification.
                  example: "securepassword123"
      responses:
        '200':
          description: User unblocked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User unblocked successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfUnblock:
                        value: "You cannot unblock yourself."
                      notBlocked:
                        value: "This user is not in your blocked list."
                      passwordRequired:
                        value: "Password is required to unblock a user."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid password."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unblocking user"

  /api/v1/user/manage-by-blocked-list/blocked:
    get:
      tags:
        - Block/Unblock
      summary: Get blocked users list
      description: >
        Retrieves the list of users blocked by the authenticated user. 
        Includes user details and the date when the user was blocked.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the blocked users list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocked_list:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching blocked list"

  /my-network/connections/count:
    get:
      tags:
        - Connections
      summary: Get the number of connections
      description: Retrieves the total number of connections for the authenticated user.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the number of connections.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "John-Doe-123"
                    description: The ID of the authenticated user.
                  number_of_connections:
                    type: integer
                    example: 150
                    description: The total number of connections for the user.
                  number_of_following:
                    type: integer
                    example: 200
                    description: The total number of users the authenticated user is following.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching number of connections"
                  error:
                    type: string
                    example: "Detailed error message" 

  /api/v1/user/bio/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user bio
      description: >
        Retrieves the bio information of a user. The response varies based on whether the authenticated user is viewing their own profile (`is_me: true`) or another user's profile (`is_me: false`).
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose bio is being retrieved.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the user bio.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_me:
                    type: boolean
                    description: Indicates if the authenticated user is viewing their own profile.
                  bio:
                    type: object
                    properties:
                      contact_info:
                        type: object
                        properties:
                          phone_number:
                            type: integer
                            nullable: true
                            example: 1234567890
                          country_code:
                            type: string
                            nullable: true
                            example: "+1"
                          phone_type:
                            type: string
                            nullable: true
                            example: "Mobile"
                          address:
                            type: string
                            nullable: true
                            example: "123 Main St"
                          birthday:
                            type: string
                            format: date-time
                            nullable: true
                            example: "1990-01-01T00:00:00.000Z"
                          website:
                            type: string
                            nullable: true
                            example: "http://johndoe.com"
                      location:
                        type: object
                        properties:
                          country_region:
                            type: string
                            example: "USA"
                          city:
                            type: string
                            example: "New York"
                      first_name:
                        type: string
                        example: "John"
                      last_name:
                        type: string
                        example: "Doe"
                      headline:
                        type: string
                        example: "Software Engineer"
                      experience:
                        type: array
                        items:
                          type: string
                        example: ["Company A", "Company B"]
                      education:
                        type: array
                        items:
                          type: string
                        example: ["University A", "University B"]
                      website:
                        type: string
                        example: "http://johndoe.com"
                  email:
                    type: string
                    example: "user1@example.com"
                  profile_photo:
                    type: string
                    format: uri
                    example: "https://res.cloudinary.com/dmg8tdy5r/image/upload/v1743174303/user_uploads/images/1743174231833-duck.jpg"
                  cover_photo:
                    type: string
                    format: uri
                    example: "https://res.cloudinary.com/dmg8tdy5r/image/upload/v1743174333/user_uploads/images/1743174262242-duck.jpg"
                  number_of_connections:
                    type: integer
                    example: 6
                  isSubscribed:
                    type: boolean
                    example: true
                  name_of_one_mutual_connection:
                    type: string
                    nullable: true
                    example: null
                  follow_primary:
                    type: boolean
                    example: false
                  is_in_received_connections:
                    type: boolean
                    example: false
                  is_in_sent_connections:
                    type: boolean
                    example: false
                  isInConnections:
                    type: boolean
                    example: true
                  isAlreadyFollowing:
                    type: boolean
                    example: false
                  isConnectByEmail:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An error occurred while retrieving the user bio."

  /api/v1/post/create-post:
    post:
      tags:
        - Posts
      summary: Create a new post
      description: Creates a new post for a user and associates it with their activity.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Content of the post.
                mediaType:
                  type: string
                  description: Type of media (e.g., image, video).
                media:
                  type: array
                  items:
                    type: string
                  description: Array of media URLs.
                commentsDisabled:
                  type: string
                  description: Who can comment on the post.
                publicPost:
                  type: boolean
                  description: Whether the post is public.
                taggedUsers:
                  type: array
                  items:
                    type: string
                  description: Array of user IDs tagged in the post.
              required:
                - content
                - commentsDisabled
                - publicPost
                - taggedUsers
      responses:
        '200':
          description: Post successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Required fields missing.
        '401':
          description: Invalid or expired token.
        '500':
          description: Server error.

  /api/v1/post/edit-post:
    patch:
      tags:
        - Posts
      summary: Edit an existing post
      description: Updates the content, media, or tagged users of an existing post.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to edit.
                content:
                  type: string
                  description: Updated content of the post.
                mediaType:
                  type: string
                  description: Updated type of media (e.g., image, video).
                media:
                  type: array
                  items:
                    type: string
                  description: Updated array of media URLs.
                taggedUsers:
                  type: array
                  items:
                    type: string
                  description: Updated array of user IDs tagged in the post.
              required:
                - postId
      responses:
        '200':
          description: Post successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Post does not exist or required fields missing.
        '401':
          description: Invalid or expired token.
        '500':
          description: Server error.

  /api/v1/post/delete-post:
    delete:
      tags:
        - Posts
      summary: Delete a post
      description: Deletes a post and removes it from the user's activity.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to delete.
              required:
                - postId
      responses:
        '200':
          description: Post successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Post does not exist or required fields missing.
        '401':
          description: Invalid or expired token.
        '500':
          description: Server error.    
  /api/v1/post/save-post:
    post:
      tags:
        - Saved Posts
      summary: Save a post
      description: Saves a post to the user's saved posts list.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to save.
              required:
                - postId
      responses:
        '200':
          description: Post successfully saved for user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Post successfully saved for user."
        '400':
          description: Required fields missing.
        '401':
          description: Invalid or expired token.
        '404':
          description: Post does not exist.
        '500':
          description: Server error.

    get:
      tags:
        - Saved Posts
      summary: Display saved posts
      description: Retrieves the user's saved posts in batches.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                limit:
                  type: integer
                  description: Number of posts to retrieve in a batch.
                cursor:
                  type: integer
                  description: Cursor for pagination.
              required:
                - limit
      responses:
        '200':
          description: Posts returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Posts returned successfully."
                  posts:
                    type: array
                    items:
                      type: object
                  nextCursor:
                    type: integer
                    description: Cursor for the next batch of posts.
        '400':
          description: Required fields missing.
        '401':
          description: Invalid or expired token.
        '500':
          description: Server error.

    delete:
      tags:
        - Saved Posts
      summary: Delete a saved post
      description: Deletes a post from the user's saved posts list.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to delete.
              required:
                - postId
      responses:
        '200':
          description: Deleted saved post successfully for user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deleted saved post successfully for user."
        '400':
          description: Required fields missing.
        '401':
          description: Invalid or expired token.
        '404':
          description: Post does not exist.
        '500':
          description: Server error.

  /api/v1/user/profile/licenses/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user licenses and certifications
      description: >
        Retrieves the licenses and certifications of a user. The response includes details such as issuing organization, issue and expiration dates, credential information, associated skills, and media.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose licenses are being retrieved.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the user licenses.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_me:
                    type: boolean
                    description: Indicates if the authenticated user is viewing their own profile.
                    example: true
                  licenses:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "67eed754aeb1108ee0d97770"
                        name:
                          type: string
                          example: "Certified Java Developer"
                        issuing_organization:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "67e6bb0adc0675f19ad1088d"
                            name:
                              type: string
                              example: "Smart Systems"
                            logo:
                              type: string
                              format: uri
                              example: "https://res.cloudinary.com/dyhnxqs6f/image/upload/v1719229880/meme_k18ky2_c_crop_w_674_h_734_x_0_y_0_u0o1yz.png"
                        issue_date:
                          type: string
                          format: date-time
                          example: "2023-01-01T00:00:00.000Z"
                        expiration_date:
                          type: string
                          format: date-time
                          example: "2025-01-01T00:00:00.000Z"
                        credintial_id:
                          type: integer
                          example: 987654321
                        credintial_url:
                          type: string
                          format: uri
                          example: "https://example.com/certificate"
                        skills:
                          type: array
                          items:
                            type: string
                          example: ["Java", "Spring Boot"]
                        media:
                          type: array
                          items:
                            type: object
                            properties:
                              media:
                                type: string
                                format: uri
                                example: "https://res.cloudinary.com/dyhnxqs6f/image/upload/v1719229880/meme_k18ky2_c_crop_w_674_h_734_x_0_y_0_u0o1yz.png"
                              title:
                                type: string
                                example: "Certificate"
                              description:
                                type: string
                                example: "Java Developer Certification"
                              _id:
                                type: string
                                example: "67eed754aeb1108ee0d97771"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user licenses"

  /api/v1/user/profile/experience/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user work experience
      description: >
        Retrieves the work experience details of a user. The response includes details such as the organization, title, employment type, location, and associated skills.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier of the user whose profile is being requested.
          schema:
            type: string
          description: The ID of the user whose work experience is being retrieved.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the user work experience.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_me:
                    type: boolean
                    description: Indicates if the authenticated user is viewing their own profile.
                    example: true
                  work_experience:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                          example: "Developer"
                        employee_type:
                          type: string
                          example: "Full-time"
                        organization:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "67e6bb0adc0675f19ad1088d"
                            name:
                              type: string
                              example: "Smart Systems"
                            logo:
                              type: string
                              format: uri
                              example: "https://example.com/logos/5.png"
                        is_current:
                          type: boolean
                          example: true
                        start_date:
                          type: string
                          format: date-time
                          example: "2020-01-01T00:00:00.000Z"
                        end_date:
                          type: string
                          format: date-time
                          nullable: true
                          example: null
                        location:
                          type: string
                          example: "New York"
                        description:
                          type: string
                          example: "Developed software solutions."
                        location_type:
                          type: string
                          example: "On-site"
                        skills:
                          type: array
                          items:
                            type: string
                          example: ["JavaScript", "Node.js"]
                        media:
                          type: array
                          items:
                            type: object
                            properties:
                              media:
                                type: string
                                format: uri
                                example: "http://example.com/media1"
                              title:
                                type: string
                                example: "Project 1"
                              description:
                                type: string
                                example: "Description of Project 1"
                              _id:
                                type: string
                                example: "67e6b2e1ef869d719662ca12"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user work experience"

  /api/v1/user/profile/education/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user education details
      description: >
        Retrieves the education details of a user. The response includes details such as the school, degree, field of study, skills, and associated media.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose education details are being retrieved.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the user education details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_me:
                    type: boolean
                    description: Indicates if the authenticated user is viewing their own profile.
                    example: true
                  education:
                    type: array
                    items:
                      type: object
                      properties:
                        school:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "67e6bb0adc0675f19ad10889"
                            name:
                              type: string
                              example: "Digital Creations"
                            logo:
                              type: string
                              format: uri
                              example: "https://example.com/logos/4.png"
                        degree:
                          type: string
                          example: "Bachelor's"
                        field_of_study:
                          type: string
                          example: "Computer Science"
                        start_date:
                          type: string
                          format: date-time
                          example: "2010-01-01T00:00:00.000Z"
                        end_date:
                          type: string
                          format: date-time
                          example: "2014-01-01T00:00:00.000Z"
                        grade:
                          type: string
                          example: "A"
                        activites_and_socials:
                          type: string
                          example: "Coding Club"
                        skills:
                          type: array
                          items:
                            type: string
                          example: ["Programming"]
                        description:
                          type: string
                          example: "Studied computer science."
                        media:
                          type: array
                          items:
                            type: object
                            properties:
                              media:
                                type: string
                                format: uri
                                example: "http://example.com/media2"
                              title:
                                type: string
                                example: "Thesis"
                              description:
                                type: string
                                example: "Description of Thesis"
                              _id:
                                type: string
                                example: "67e6b2e1ef869d719662ca11"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user education details"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token is passed as a header in the format `Authorization: Bearer {token}`
  schemas:
    JobSummary:
      type: object
      properties:
        _id:
          type: string
          example: "60d5ec69c5d019ab15c55678"
        job_title:
          type: string
          example: "Software Engineer"
        location:
          type: string
          example: "New York, NY"
        workplace_type:
          type: string
          example: "On-site"
        salary:
          type: number
          example: 85000
        experience_level:
          type: string
          example: "Mid-Senior Level"
        posted_time:
          type: string
          format: date-time
          example: "2023-05-20T12:00:00Z"
        organization_id:
          type: object
          properties:
            name:
              type: string
              example: "Tech Solutions Inc."
            logo:
              type: string
              example: "https://example.com/logos/techsolutions.png"
    
    Job:
      type: object
      properties:
        _id:
          type: string
          example: "60d5ec69c5d019ab15c55678"
        job_title:
          type: string
          example: "Software Engineer"
        job_description:
          type: string
          example: "We are looking for a software engineer with experience in..."
        location:
          type: string
          example: "New York, NY"
        workplace_type:
          type: string
          example: "On-site"
        salary:
          type: number
          example: 85000
        experience_level:
          type: string
          enum: ["Entry Level", "Mid-Senior Level", "Director", "Executive"]
          example: "Mid-Senior Level"
        posted_time:
          type: string
          format: date-time
          example: "2023-05-20T12:00:00Z"
        application_deadline:
          type: string
          format: date-time
          example: "2023-06-20T23:59:59Z"
        targetted_skills:
          type: array
          items:
            type: string
          example: ["JavaScript", "React", "Node.js"]
        organization_id:
          type: object
          properties:
            _id:
              type: string
              example: "60d5ec69c5d019ab15c55999"
            organization_name:
              type: string
              example: "Tech Solutions Inc."
            logo:
              type: string
              example: "https://example.com/logos/techsolutions.png"
            website:
              type: string
              example: "https://techsolutions.com"
            industry:
              type: string
              example: "Information Technology"
