openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user (Local)
      description: >
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user (Local)
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error

  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email.
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/verify-otp:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Verifies the one-time password (OTP) provided by the user. Requires email and OTP.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: "test@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Password reset link sent.
        '400':
          description: Invalid email format.
        '404':
          description: Email not registered.
        '500':
          description: Server error
  /api/v1/user/reset-password:
    patch:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "new_password"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Email and OTP are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and OTP are required"
        '401':
          description: Invalid OTP or OTP expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP"
  /api/v1/user/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: >
        Registers a new user by creating an account with the provided email, password, and optional name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "newuser@example.com"
        '400':
          description: Email or Username and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Username and password are required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
                    example: "Server error"

  /profile/profile-picture:
    post:
      tags:
        - Profile Picture
      summary: Upload a profile picture
      description: Uploads a profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded and updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error uploading profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error uploading profile picture
                  error:
                    type: string
                    example: Database error
    put:
      tags:
        - Profile Picture
      summary: Update a profile picture
      description: Updates the profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating profile picture
                  error:
                    type: string
                    example: Database error
    delete:
      tags:
        - Profile Picture
      summary: Delete a profile picture
      description: Deletes the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture deleted successfully"
        '400':
          description: No profile picture to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No profile picture to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this profile picture"
        '500':
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting profile picture"
                  error:
                    type: string
                    example: "Cloudinary error"
    
  /profile/profile-picture/{user_id}:
    get:
      tags:
        - Profile Picture
      summary: Get a profile picture
      description: Retrieves the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "https://cloudinary.com/user/profile_picture.jpg"
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving profile picture"
                  error:
                    type: string
                    example: "Database error"
  /profile/cover-photo:
    post:
      tags:
        - Cover Photo
      summary: Upload a cover photo
      description: Uploads a new cover photo for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Cover photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo uploaded and updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Cover Photo
      summary: Update a cover photo
      description: Updates the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new image file to upload.
      responses:
        '200':
          description: Cover photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/new_cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this cover photo."
        '500':
          description: Error updating cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Cover Photo
      summary: Delete a cover photo
      description: Deletes the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo deleted successfully"
        '400':
          description: No cover photo to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No cover photo to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this cover photo."
        '500':
          description: Error deleting cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

  /profile/cover-photo/{user_id}:
    get:
      tags:
        - Cover Photo
      summary: Get a cover photo
      description: Retrieves the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '404':
          description: Cover photo not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving cover photo"
                  error:
                    type: string
                    example: "Database error"
  /profile/resume:
    post:
      tags:
        - Resume
      summary: Upload a resume
      description: Uploads a new resume for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The PDF file to upload.
      responses:
        '200':
          description: Resume uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume uploaded and updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Resume
      summary: Update a resume
      description: Updates the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The new PDF file to upload.
      responses:
        '200':
          description: Resume updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/new_resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this resume."
        '500':
          description: Error updating resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        '400':
          description: No resume to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No resume to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this resume."
        '500':
          description: Error deleting resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting resume"
                  error:
                    type: string
                    example: "Cloudinary error"

  /profile/resume/{user_id}:
    get:
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '404':
          description: Resume not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Resume not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

        '403':
          description: Access denied

        '500':
          description: Error retrieving resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving resume"
                  error:
                    type: string
                    example: "Database error"
  /api/v1/user/update-username:
    post:
      tags:
        - Auth
      summary: Update username
      description: >
        Updates the user's username using the provided token and new username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_username
              properties:
                token:
                  type: string
                  example: "jwt_token"
                new_username:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new username are required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Username already in use"

        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Server error"
  # Fix resume endpoints structure - remove standalone delete/get and put them under the path
  /profile/resume/{user_id}:
    # Your existing post and put operations remain the same
    # ...
    delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        # Other response codes remain...
        
    get:
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        # Other response codes remain...

  # Add skills endpoints
  /api/v1/user/add-skill:
    post:
      tags:
        - Skills
      summary: Add a new skill
      description: Adds a new skill to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                name:
                  type: string
                  description: Name of the skill
      responses:
        '201':
          description: Skill added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill added successfully"
                  skill:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-skill/{skillId}:
    put:
      tags:
        - Skills
      summary: Update a skill
      description: Updates an existing skill
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: string
          description: ID of the skill to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                name:
                  type: string
      responses:
        '200':
          description: Skill updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Skill not found
        '500':
          description: Server error

  /api/v1/user/delete-skill/{skillId}:
    delete:
      tags:
        - Skills
      summary: Delete a skill
      description: Deletes a skill from the user's profile
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: string
          description: ID of the skill to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Skill deleted successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Skill not found
        '500':
          description: Server error

  # Add validate-token endpoint
  /api/v1/user/validate-token:
    get:
      tags:
        - Auth
      summary: Validate authentication token
      description: Validates if the provided JWT token is valid and not expired
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: JWT token to validate
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired token"
  # Email Update Endpoints
  /api/v1/user/update-email:
    put:
      tags:
        - User Profile
      summary: Update user email
      description: Updates the user's email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                email:
                  type: string
                  description: New email address
      responses:
        '200':
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '409':
          description: Email already in use
        '500':
          description: Server error

  # Delete Account Endpoints
  /api/v1/user/delete-account:
    delete:
      tags:
        - User Profile
      summary: Delete user account
      description: Permanently deletes user account and all associated data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  # View User Profile Endpoint
  /api/v1/user/profile/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieves a user's profile information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    # Additional user properties would be described here
        '404':
          description: User not found
        '500':
          description: Server error

  # Work Experience Endpoints
  /api/v1/user/add-work-experience:
    post:
      tags:
        - Experience
      summary: Add work experience
      description: Adds a new work experience entry to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                title:
                  type: string
                  description: Job title
                company:
                  type: string
                  description: Company name
                location:
                  type: string
                  description: Job location
                start_date:
                  type: string
                  format: date
                  description: Start date
                end_date:
                  type: string
                  format: date
                  description: End date (null if current position)
                description:
                  type: string
                  description: Job description
      responses:
        '201':
          description: Work experience added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Work experience added successfully"
                  experience:
                    type: object
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-work-experience/{experienceId}:
    put:
      tags:
        - Experience
      summary: Update work experience
      description: Updates an existing work experience entry
      parameters:
        - name: experienceId
          in: path
          required: true
          schema:
            type: string
          description: ID of the experience entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                # Same fields as add-work-experience
      responses:
        '200':
          description: Work experience updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Experience not found
        '500':
          description: Server error

  /api/v1/user/delete-work-experience/{experienceId}:
    delete:
      tags:
        - Experience
      summary: Delete work experience
      description: Deletes a work experience entry
      parameters:
        - name: experienceId
          in: path
          required: true
          schema:
            type: string
          description: ID of the experience entry to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Work experience deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Experience not found
        '500':
          description: Server error

  # Education Endpoints
  /api/v1/user/add-education:
    post:
      tags:
        - Education
      summary: Add education
      description: Adds a new education entry to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                institution:
                  type: string
                  description: Name of educational institution
                degree:
                  type: string
                  description: Degree obtained
                field_of_study:
                  type: string
                  description: Field of study
                start_date:
                  type: string
                  format: date
                  description: Start date
                end_date:
                  type: string
                  format: date
                  description: End date (null if current education)
                description:
                  type: string
                  description: Additional details
      responses:
        '201':
          description: Education added successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-education/{educationId}:
    put:
      tags:
        - Education
      summary: Update education
      description: Updates an existing education entry
      parameters:
        - name: educationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the education entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                # Same fields as add-education
      responses:
        '200':
          description: Education updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Education not found
        '500':
          description: Server error

  /api/v1/user/delete-education/{educationId}:
    delete:
      tags:
        - Education
      summary: Delete education
      description: Deletes an education entry
      parameters:
        - name: educationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the education entry to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Education deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Education not found
        '500':
          description: Server error

  # License/Certificate Endpoints
  /api/v1/user/add-license:
    post:
      tags:
        - License
      summary: Add license or certificate
      description: Adds a new license or certificate to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                name:
                  type: string
                  description: License/certificate name
                issuing_organization:
                  type: string
                  description: Organization that issued the license
                issue_date:
                  type: string
                  format: date
                  description: Date when the license was issued
                expiration_date:
                  type: string
                  format: date
                  description: Expiration date (if applicable)
                credential_id:
                  type: string
                  description: Credential identifier
      responses:
        '201':
          description: License added successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-license/{licenseId}:
    put:
      tags:
        - License
      summary: Update license or certificate
      description: Updates an existing license or certificate
      parameters:
        - name: licenseId
          in: path
          required: true
          schema:
            type: string
          description: ID of the license to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                # Same fields as add-license
      responses:
        '200':
          description: License updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: License not found
        '500':
          description: Server error

  /api/v1/user/delete-license/{licenseId}:
    delete:
      tags:
        - License
      summary: Delete license or certificate
      description: Deletes a license or certificate
      parameters:
        - name: licenseId
          in: path
          required: true
          schema:
            type: string
          description: ID of the license to delete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: License deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: License not found
        '500':
          description: Server error

  # Update User Profile Endpoint
  /api/v1/user/update-user-profile:
    put:
      tags:
        - User Profile
      summary: Update user profile
      description: Updates general user profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                first_name:
                  type: string
                last_name:
                  type: string
                headline:
                  type: string
                location:
                  type: string
                about:
                  type: string
                # Additional fields can be added here
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
  
  # Privacy Settings Endpoints
  /api/v1/user/privacy-settings/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility settings
      description: Retrieves the current profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: Privacy settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_visibility:
                    type: string
                    example: "public"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
          
    put:
      tags:
        - Privacy Settings
      summary: Update profile visibility settings
      description: Updates the profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                profile_visibility:
                  type: string
                  enum: [public, connections, private]
                  description: Profile visibility level
      responses:
        '200':
          description: Privacy settings updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Not authorized to modify these settings
        '404':
          description: User not found
        '500':
          description: Server error

  # Email Verification Endpoints
  /api/v1/user/verify-email:
    post:
      tags:
        - Auth
      summary: Verify email
      description: Verifies if an email address is available for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
      responses:
        '200':
          description: Email is available
        '409':
          description: Email already in use
        '500':
          description: Server error
          
  /api/v1/user/forget-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiates the password reset process by sending a reset link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent
        '400':
          description: Invalid email format
        '404':
          description: Email not registered
        '500':
          description: Server error
  
  /api/v1/user/follow/{user_id}:
    post:
      tags:
        - Connections
      summary: Follow a user
      description: >
        Allows a user to follow another user without requiring a connection. 
        Validates the token and checks if the viewer is allowed to follow the target user 
        based on their privacy settings, block list, and existing follow status.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to follow
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: false
      responses:
        '200':
          description: User followed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are now following this user."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfFollow:
                        value: "You cannot follow yourself."
                      alreadyFollowing:
                        value: "You are already following this user."
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      blocked:
                        value: "You are blocked from following this user."
                      connectionsOnly:
                        value: "Only connections can follow this user."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error following user"

  /api/v1/user/unfollow/{user_id}:
    delete:
      tags:
        - Connections
      summary: Unfollow a user
      description: >
        Allows a user to unfollow another user. Validates the token and ensures the user is authorized to perform the action. 
        Checks if the user is currently following the target user and removes the relationship if valid.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to unfollow.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: User unfollowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You have unfollowed this user."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfUnfollow:
                        value: "You cannot unfollow yourself."
                      notFollowing:
                        value: "You are not following this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unfollowing user."
  
  /api/v1/user/my-network/network-manager/following:
    get:
      tags:
        - Network Manager
      summary: Get the following list
      description: >
        Retrieves the list of users that the authenticated user is following. 
        Excludes users who are part of the connections network.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the following list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  following:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-De-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching following list."

  /api/v1/user/my-network/network-manager/followers:
    get:
      tags:
        - Network Manager
      summary: Get the followers list
      description: >
        Retrieves the list of users who are following the authenticated user. 
        Includes additional information about whether the authenticated user is following each follower.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the followers list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        following:
                          type: boolean
                          example: true
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                  
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching followers list."
  /api/v1/user/connect/{user_id}:
    post:
      tags:
        - Connections
      summary: Send a connection request
      description: >
        Allows a user to send a connection request to another user. 
        Validates the token and ensures the user is authorized to perform the action. 
        Checks various conditions such as whether the user is blocked, already connected, or restricted by privacy settings.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to send a connection request to.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Required if the target user has set their privacy to "email".
                  example: "user@example.com"
      responses:
        '200':
          description: Connection request sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request sent successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfRequest:
                        value: "You cannot send a connection request to yourself."
                      alreadyConnected:
                        value: "You are already connected to this user."
                      emailRequired:
                        value: "Email is required to send a connection request."
                      emailMismatch:
                        value: "The provided email does not match the user's email."
                      alreadyPending:
                        value: "You have already sent a connection request to this user."
                      threeWeekRestriction:
                        value: "You cannot send another connection request to this user for 3 weeks."
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are blocked from sending a connection request to this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error sending connection request."
  /api/v1/user/my-network/invitation-manager/sent:
    get:
      tags:
        - Invitation Manager
      summary: Get sent connection requests
      description: >
        Retrieves the list of connection requests sent by the authenticated user. 
        The response includes the user details and the date the connection request was sent.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the sent connection requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sentConnections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"

                        
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                  
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching sent connections."

  /api/v1/user/my-network/invitation-manager/received:
    get:
      tags:
        - Invitation Manager
      summary: Get received connection requests
      description: >
        Retrieves the list of connection requests received by the authenticated user. 
        The response includes the user details, the date the connection request was received.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the received connection requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  receivedConnections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
                        numberOfMutualConnections:
                          type: integer
                          example: 5
                        nameOfOneMutualConnection:
                          type: string
                          example: "Jane Smith"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
                         
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching received connections."

  /api/v1/user/my-network/invitation-manager/accept/{user_id}:
    post:
      tags:
        - Invitation Manager
      summary: Accept a connection request
      description: >
        Allows the authenticated user to accept a connection request from another user. 
        Updates the connections list for both users and removes the pending request.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being accepted.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request accepted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request accepted successfully"
                  connectionDate:
                    type: string
                    format: date-time
                    example: "2025-03-28T12:34:56.789Z"
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending connection request from this user"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error accepting connection request"

  /api/v1/user/my-network/invite-connect/connections/{user_id}:
    get:
      tags:
        - Connections
      summary: Get connections list
      description: >
        Retrieves the list of all connections for the authenticated user. 
        The response includes user details and the date the connection was established.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the connections list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
                  next_cursor:
                    type: string
                    example: "eyJhbGciOiJIUzI1Ni"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching connections"

  /api/v1/user/my-network/connections/remove/{user_id}:
    delete:
      tags:
        - Connections
      summary: Remove a connection
      description: >
        Allows the authenticated user to remove a connection with another user. 
        Updates the connections list for both users and ensures the relationship is removed.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to remove from the connections list.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection removed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection removed successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This user is not in your connections list."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing connection"
  
  /api/v1/user/my-network/invitation-manager/ignore/{user_id}:
    delete:
      tags:
        - Invitation Manager
      summary: Ignore a received connection request
      description: >
        Allows the authenticated user to ignore a received connection request from another user. 
        Removes the pending connection request from the user's received connections list.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being ignored.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request ignored successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request ignored successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No received connection request from this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error ignoring connection request"

  /api/v1/my-network/invitation-manager/withdraw/{user_id}:
    delete:
      tags:
        - Invitation Manager
      summary: Withdraw a sent connection request
      description: >
        Allows the authenticated user to withdraw a sent connection request to another user. 
        Removes the pending connection request from the user's sent connections list and the target user's received connections list.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose connection request is being withdrawn.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Connection request withdrawn successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Connection request withdrawn successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No sent connection request to this user."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error withdrawing connection request" 

  /api/v1/user/block/{user_id}:
    post:
      tags:
        - Block/Unblock
      summary: Block a user
      description: >
        Allows the authenticated user to block another user. 
        Removes the blocked user from the connections, followers, following, sent connections, and received connections lists.
        Prevents the blocked user from interacting with the authenticated user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to block.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: User blocked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User blocked successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfBlock:
                        value: "You cannot block yourself."
                      alreadyBlocked:
                        value: "This user is already blocked."
                      recentlyUnblocked:
                        value: "You cannot reblock this user within 48 hours of unblocking."
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error blocking user"

  /api/v1/user/manage-by-blocked-list/unblock/{user_id}:
    delete:
      tags:
        - Block/Unblock
      summary: Unblock a user
      description: >
        Allows the authenticated user to unblock a previously blocked user. 
        Requires the user's password for verification. Adds the unblocked user to the `unblocked_users` list with the current date.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to unblock.
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: The password of the authenticated user for verification.
                  example: "securepassword123"
      responses:
        '200':
          description: User unblocked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User unblocked successfully."
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      selfUnblock:
                        value: "You cannot unblock yourself."
                      notBlocked:
                        value: "This user is not in your blocked list."
                      passwordRequired:
                        value: "Password is required to unblock a user."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid password."
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error unblocking user"

  /api/v1/user/manage-by-blocked-list/blocked:
    get:
      tags:
        - Block/Unblock
      summary: Get blocked users list
      description: >
        Retrieves the list of users blocked by the authenticated user. 
        Includes user details and the date when the user was blocked.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the blocked users list.
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocked_list:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          example: "John-Doe-123"
                        name:
                          type: string
                          example: "John Doe"
                        headline:
                          type: string
                          example: "Software Engineer at TechCorp"
                        profilePicture:
                          type: string
                          example: "https://example.com/profile-picture.jpg"
                        date:
                          type: string
                          format: date-time
                          example: "2025-03-28T12:34:56.789Z"
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching blocked list"

  /my-network/connections/count:
    get:
      tags:
        - Connections
      summary: Get the number of connections
      description: Retrieves the total number of connections for the authenticated user.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: Bearer token for authentication.
      responses:
        '200':
          description: Successfully retrieved the number of connections.
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: string
                    example: "John-Doe-123"
                    description: The ID of the authenticated user.
                  number_of_connections:
                    type: integer
                    example: 150
                    description: The total number of connections for the user.
                  number_of_following:
                    type: integer
                    example: 200
                    description: The total number of users the authenticated user is following.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching number of connections"
                  error:
                    type: string
                    example: "Detailed error message" 

      