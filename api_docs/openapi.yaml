openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.
  /api/v1/auth/logout:
    get:
      tags:
        - Google Auth
      summary: Logs the user out
      description: Revokes Google tokens if applicable and destroys the session.
      responses:
        '302':
          description: Redirects to the login page after logging out.
  /api/v1/user/login:
    post:
      tags:
        - Auth
      summary: Logs in a user
      description: >
        Authenticates a user using email and password. 
        On successful authentication, sets a JWT cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
  /api/v1/user/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email (and optionally via SMS).
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
                phone:
                  type: string
                  example: "1234567890"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/verify-otp:
    post:
      tags:
        - OTP
      summary: Verify OTP
      description: >
        Verifies the one-time password (OTP) provided by the user. Requires email and OTP.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: "test@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
        '400':
          description: Email and OTP are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and OTP are required"
        '401':
          description: Invalid OTP or OTP expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP"
  /api/v1/user/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: >
        Registers a new user by creating an account with the provided email, password, and optional name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "newuser@example.com"
        '400':
          description: Email or Username and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Username and password are required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/forget-password:
  post:
    tags:
      - Auth
    summary: Request password reset
    description: >
      Sends a password reset link to the user's email.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                example: "user@example.com"
    responses:
      '200':
        description: Password reset link sent
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Password reset link sent to your email"
      '400':
        description: Invalid email format
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Invalid email format"
      '404':
        description: Email not registered
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Email not registered"
      '500':
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Server error"

  /api/v1/user/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - token
              properties:
                password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new password are required"
                  message:
                    type: string
                    example: "Password must be at least 8 characters long"
                  message:
                    type: string
                    example: "Please enter a new password"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"

  /api/v1/user/update-password:
    post:
      tags:
        - Auth
      summary: Update password
      description: >
        Updates the user's password using the provided old password, new password, and token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  example: "old_password"
                new_password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and password are required"
                  message:
                    type: string
                    example: "New password must be at least 8 characters long"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
                  message:
                    type: string
                    example: "Please enter a new password"
        '403':
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old password is incorrect"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/privacy/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility
      description: Retrieves the profile visibility setting for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose profile visibility is being retrieved.
      responses:
        '200':
          description: Profile visibility retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileVisibility:
                    type: string
                    example: "Public"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: User is not authorized to access this profile visibility.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authorized to access this profile visibility."
        '404':
          description: User not found or privacy settings not available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User does not have privacy settings."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving privacy settings"
                  error:
                    type: string
                    example: "Database error"

    put:
      tags:
        - Privacy Settings
      summary: Update profile visibility
      description: Updates the profile visibility setting for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose profile visibility is being updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profileVisibility:
                  type: string
                  description: The new profile visibility setting.
                  enum:
                    - Public
                    - Private
                  example: "Private"
      responses:
        '200':
          description: Profile visibility updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile visibility updated successfully"
                  profileVisibility:
                    type: string
                    example: "Private"
        '400':
          description: Invalid profile visibility setting.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid profile visibility setting"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: User is not authorized to update this profile visibility.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authorized to update this profile visibility."
        '404':
          description: User not found or privacy settings not available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User does not have privacy settings."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating privacy settings"
                  error:
                    type: string
                    example: "Database error"