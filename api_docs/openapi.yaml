openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user (Local)
      description: >
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user (Local)
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error

  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email.
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/verify-otp:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Verifies the one-time password (OTP) provided by the user. Requires email and OTP.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: "test@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Password reset link sent.
        '400':
          description: Invalid email format.
        '404':
          description: Email not registered.
        '500':
          description: Server error
  /api/v1/user/reset-password:
    patch:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "new_password"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Email and OTP are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and OTP are required"
        '401':
          description: Invalid OTP or OTP expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP"
  /api/v1/user/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: >
        Registers a new user by creating an account with the provided email, password, and optional name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "newuser@example.com"
        '400':
          description: Email or Username and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Username and password are required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
                    example: "Server error"

  /profile/profile-picture/{user_id}:
    post:
      tags:
        - Profile Picture
      summary: Upload a profile picture
      description: Uploads a profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded and updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error uploading profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error uploading profile picture
                  error:
                    type: string
                    example: Database error
    put:
      tags:
        - Profile Picture
      summary: Update a profile picture
      description: Updates the profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating profile picture
                  error:
                    type: string
                    example: Database error
    delete:
      tags:
        - Profile Picture
      summary: Delete a profile picture
      description: Deletes the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture deleted successfully"
        '400':
          description: No profile picture to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No profile picture to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this profile picture"
        '500':
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting profile picture"
                  error:
                    type: string
                    example: "Cloudinary error"
    get:
      tags:
        - Profile Picture
      summary: Get a profile picture
      description: Retrieves the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "https://cloudinary.com/user/profile_picture.jpg"
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving profile picture"
                  error:
                    type: string
                    example: "Database error"
  /profile/cover-photo/{user_id}:
    post:
      tags:
        - Cover Photo
      summary: Upload a cover photo
      description: Uploads a new cover photo for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Cover photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo uploaded and updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Cover Photo
      summary: Update a cover photo
      description: Updates the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new image file to upload.
      responses:
        '200':
          description: Cover photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/new_cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this cover photo."
        '500':
          description: Error updating cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Cover Photo
      summary: Delete a cover photo
      description: Deletes the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo deleted successfully"
        '400':
          description: No cover photo to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No cover photo to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this cover photo."
        '500':
          description: Error deleting cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    get:
      tags:
        - Cover Photo
      summary: Get a cover photo
      description: Retrieves the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '404':
          description: Cover photo not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving cover photo"
                  error:
                    type: string
                    example: "Database error"
  /profile/resume/{user_id}:
    post:
      tags:
        - Resume
      summary: Upload a resume
      description: Uploads a new resume for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The PDF file to upload.
      responses:
        '200':
          description: Resume uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume uploaded and updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Resume
      summary: Update a resume
      description: Updates the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The new PDF file to upload.
      responses:
        '200':
          description: Resume updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/new_resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this resume."
        '500':
          description: Error updating resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        '400':
          description: No resume to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No resume to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this resume."
        '500':
          description: Error deleting resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    get:
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '404':
          description: Resume not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access denied
        '500':
          description: Error retrieving resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving resume"
                  error:
                    type: string
                    example: "Database error"
  /api/v1/user/update-username:
    post:
      tags:
        - Auth
      summary: Update username
      description: >
        Updates the user's username using the provided token and new username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_username
              properties:
                token:
                  type: string
                  example: "jwt_token"
                new_username:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new username are required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already in use"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  # Fix resume endpoints structure - remove standalone delete/get and put them under the path
  /profile/resume/{user_id}:
    # Your existing post and put operations remain the same
    # ...
    delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        # Other response codes remain...
        
    get:
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        # Other response codes remain...

  
  # Add validate-token endpoint
  /api/v1/user/validate-token:
    get:
      tags:
        - Auth
      summary: Validate authentication token
      description: Validates if the provided JWT token is valid and not expired
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: JWT token to validate
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid or expired token"
  # Email Update Endpoints
  /api/v1/user/update-email:
    put:
      tags:
        - User Profile
      summary: Update user email
      description: Updates the user's email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                email:
                  type: string
                  description: New email address
      responses:
        '200':
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '409':
          description: Email already in use
        '500':
          description: Server error

  # Delete Account Endpoints
  /api/v1/user/delete-account:
    delete:
      tags:
        - User Profile
      summary: Delete user account
      description: Permanently deletes user account and all associated data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error

  # View User Profile Endpoint
  /api/v1/user/profile/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: Retrieves a user's profile information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    # Additional user properties would be described here
        '404':
          description: User not found
        '500':
          description: Server error
  
  # Privacy Settings Endpoints
  /api/v1/user/privacy-settings/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility settings
      description: Retrieves the current profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      responses:
        '200':
          description: Privacy settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profile_visibility:
                    type: string
                    example: "public"
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
          
    put:
      tags:
        - Privacy Settings
      summary: Update profile visibility settings
      description: Updates the profile visibility settings for a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Authentication token
                profile_visibility:
                  type: string
                  enum: [public, connections, private]
                  description: Profile visibility level
      responses:
        '200':
          description: Privacy settings updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '403':
          description: Not authorized to modify these settings
        '404':
          description: User not found
        '500':
          description: Server error

  # Email Verification Endpoints
  /api/v1/user/verify-email:
    post:
      tags:
        - Auth
      summary: Verify email
      description: Verifies if an email address is available for registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
      responses:
        '200':
          description: Email is available
        '409':
          description: Email already in use
        '500':
          description: Server error
          
  /api/v1/user/forget-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiates the password reset process by sending a reset link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent
        '400':
          description: Invalid email format
        '404':
          description: Email not registered
        '500':
          description: Server error
   
  # Jobs Endpoints
  /api/v1/jobs/save-jobs/{jobId}:
    post:
      tags:
        - Jobs
      summary: Save a job
      description: Saves a job to the user's saved jobs list
      security:
        - bearerAuth: []
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: ID of the job to save
      responses:
        '200':
          description: Job saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job saved successfully"
        '400':
          description: Invalid job ID format or job already saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid job ID format" 
        '401':
          description: Unauthorized, authentication token missing or invalid
        '404':
          description: Job not found
        '500':
          description: Server error
          
  /api/v1/jobs/get-saved-jobs:
    get:
      tags:
        - Jobs
      summary: Get user's saved jobs
      description: Retrieves all jobs saved by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Saved jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '401':
          description: Unauthorized, authentication token missing or invalid
        '404':
          description: User not found
        '500':
          description: Server error
          
  /api/v1/jobs/get-top-jobs:
    get:
      tags:
        - Jobs
      summary: Get personalized job recommendations
      description: >
        Returns job recommendations based on user skills, experience, and preferences.
        Jobs are ranked by relevance to user profile.
      security:
        - bearerAuth: []
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (ID of the last item in previous page)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of jobs to return per page
      responses:
        '200':
          description: Job recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Personalized job recommendations retrieved successfully"
                  count: 
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  nextCursor:
                    type: string
                    example: "60d5ec69c5d019ab15c55555"
        '401':
          description: Unauthorized, authentication token missing or invalid
        '500':
          description: Server error
          
  /api/v1/jobs/get-jobs:
    get:
      tags:
        - Jobs
      summary: Get all jobs
      description: Retrieves all available jobs with pagination
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor for pagination (ID of the last item in previous page)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of jobs to return per page
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs retrieved successfully"
                  count: 
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  nextCursor:
                    type: string
                    example: "60d5ec69c5d019ab15c55555"
        '500':
          description: Server error
          
  /api/v1/jobs/get-job/{jobId}:
    get:
      tags:
        - Jobs
      summary: Get job details
      description: Retrieves detailed information about a specific job
      parameters:
        - name: jobId
          in: path
          required: true
          schema:
            type: string
          description: ID of the job to retrieve
      responses:
        '200':
          description: Job retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Job retrieved successfully"
                  data:
                    $ref: '#/components/schemas/Job'
        '400':
          description: Invalid job ID format
        '404':
          description: Job not found
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs:
    get:
      tags:
        - Jobs
      summary: Filter jobs with multiple criteria
      description: Filters jobs based on multiple criteria submitted in the request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Location to filter jobs by (full or partial match)
                  example: "New York"
                experienceLevel:
                  oneOf:
                    - type: string
                      description: Single experience level to filter by
                      example: "Entry Level"
                    - type: array
                      items:
                        type: string
                      description: Multiple experience levels to filter by
                      example: ["Entry Level", "Mid-Senior Level"]
                companyId:
                  type: string
                  description: ID of the company to filter jobs by
                  example: "60d5ec69c5d019ab15c55678"
                minSalary:
                  type: number
                  description: Minimum salary to filter jobs by
                  example: 50000
                maxSalary:
                  type: number
                  description: Maximum salary to filter jobs by
                  example: 100000
      responses:
        '200':
          description: Jobs filtered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered successfully"
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid filter criteria or no filters provided
        '404':
          description: No jobs found matching the provided filters
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/location/{location}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by location
      description: Retrieves jobs filtered by a specific location
      parameters:
        - name: location
          in: path
          required: true
          schema:
            type: string
          description: Location to filter jobs by (partial match supported)
          example: "Chicago"
      responses:
        '200':
          description: Jobs filtered by location successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by location successfully"
                  count:
                    type: integer
                    example: 5
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '404':
          description: No jobs found for this location
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/experience-level/{levels}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by experience level
      description: Retrieves jobs filtered by one or more experience levels
      parameters:
        - name: levels
          in: path
          required: true
          schema:
            type: string
          description: Comma-separated list of experience levels
          example: "Entry Level,Mid-Senior Level"
      responses:
        '200':
          description: Jobs filtered by experience levels successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by experience levels successfully"
                  count:
                    type: integer
                    example: 8
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '404':
          description: No jobs found for the selected experience levels
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/company/{companyId}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by company
      description: Retrieves jobs posted by a specific company
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
          description: ID of the company
          example: "60d5ec69c5d019ab15c55678"
      responses:
        '200':
          description: Jobs filtered by company successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by company successfully"
                  count:
                    type: integer
                    example: 3
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid company ID format
        '404':
          description: No jobs found for this company
        '500':
          description: Server error
          
  /api/v1/jobs/filter-jobs/salary-range/{minSalary}/{maxSalary}:
    get:
      tags:
        - Jobs
      summary: Filter jobs by salary range
      description: Retrieves jobs within a specific salary range
      parameters:
        - name: minSalary
          in: path
          required: true
          schema:
            type: string
          description: Minimum salary (numeric value)
          example: "50000"
        - name: maxSalary
          in: path
          required: true
          schema:
            type: string
          description: Maximum salary (numeric value)
          example: "100000"
      responses:
        '200':
          description: Jobs filtered by salary range successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Jobs filtered by salary range successfully"
                  count:
                    type: integer
                    example: 12
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
        '400':
          description: Invalid salary range or non-numeric values provided
        '404':
          description: No jobs found in this salary range
        '500':
          description: Server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token is passed as a header in the format `Authorization: Bearer {token}`
  schemas:
    JobSummary:
      type: object
      properties:
        _id:
          type: string
          example: "60d5ec69c5d019ab15c55678"
        job_title:
          type: string
          example: "Software Engineer"
        location:
          type: string
          example: "New York, NY"
        workplace_type:
          type: string
          example: "On-site"
        salary:
          type: number
          example: 85000
        experience_level:
          type: string
          example: "Mid-Senior Level"
        posted_time:
          type: string
          format: date-time
          example: "2023-05-20T12:00:00Z"
        organization_id:
          type: object
          properties:
            name:
              type: string
              example: "Tech Solutions Inc."
            logo:
              type: string
              example: "https://example.com/logos/techsolutions.png"
    
    Job:
      type: object
      properties:
        _id:
          type: string
          example: "60d5ec69c5d019ab15c55678"
        job_title:
          type: string
          example: "Software Engineer"
        job_description:
          type: string
          example: "We are looking for a software engineer with experience in..."
        location:
          type: string
          example: "New York, NY"
        workplace_type:
          type: string
          example: "On-site"
        salary:
          type: number
          example: 85000
        experience_level:
          type: string
          enum: ["Entry Level", "Mid-Senior Level", "Director", "Executive"]
          example: "Mid-Senior Level"
        posted_time:
          type: string
          format: date-time
          example: "2023-05-20T12:00:00Z"
        application_deadline:
          type: string
          format: date-time
          example: "2023-06-20T23:59:59Z"
        targetted_skills:
          type: array
          items:
            type: string
          example: ["JavaScript", "React", "Node.js"]
        organization_id:
          type: object
          properties:
            _id:
              type: string
              example: "60d5ec69c5d019ab15c55999"
            organization_name:
              type: string
              example: "Tech Solutions Inc."
            logo:
              type: string
              example: "https://example.com/logos/techsolutions.png"
            website:
              type: string
              example: "https://techsolutions.com"
            industry:
              type: string
              example: "Information Technology"