openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.
  /api/v1/auth/logout:
    get:
      tags:
        - Google Auth
      summary: Logs the user out
      description: Revokes Google tokens if applicable and destroys the session.
      responses:
        '302':
          description: Redirects to the login page after logging out.
  /api/v1/user/login:
    post:
      tags:
        - Auth
      summary: Logs in a user
      description: >
        Authenticates a user using email and password. 
        On successful authentication, sets a JWT cookie.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
  /api/v1/user/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email (and optionally via SMS).
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
                phone:
                  type: string
                  example: "1234567890"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/verify-otp:
    post:
      tags:
        - OTP
      summary: Verify OTP
      description: >
        Verifies the one-time password (OTP) provided by the user. Requires email and OTP.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: "test@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
        '400':
          description: Email and OTP are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and OTP are required"
        '401':
          description: Invalid OTP or OTP expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP"
  /api/v1/user/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: >
        Registers a new user by creating an account with the provided email, password, and optional name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "newuser@example.com"
        '400':
          description: Email or Username and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Username and password are required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/forget-password:
  post:
    tags:
      - Auth
    summary: Request password reset
    description: >
      Sends a password reset link to the user's email.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                example: "user@example.com"
    responses:
      '200':
        description: Password reset link sent
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Password reset link sent to your email"
      '400':
        description: Invalid email format
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Invalid email format"
      '404':
        description: Email not registered
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Email not registered"
      '500':
        description: Server error
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Server error"

  /api/v1/user/reset-password:
    post:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - token
              properties:
                password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new password are required"
                  message:
                    type: string
                    example: "Password must be at least 8 characters long"
                  message:
                    type: string
                    example: "Please enter a new password"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"

  /api/v1/user/update-password:
    post:
      tags:
        - Auth
      summary: Update password
      description: >
        Updates the user's password using the provided old password, new password, and token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  example: "old_password"
                new_password:
                  type: string
                  example: "new_secure_password"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and password are required"
                  message:
                    type: string
                    example: "New password must be at least 8 characters long"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
                  message:
                    type: string
                    example: "Please enter a new password"
        '403':
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old password is incorrect"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/profile/{user_id}:
    get:
      tags:
        - User Profile
      summary: Get user profile
      description: >
        Retrieves the profile of a user by their `user_id`. The response includes details such as bio, education, experience, skills, licenses, posts, comments, and reacted posts. 
        Access to the profile depends on the user's privacy settings and whether the viewer is blocked or connected.
      parameters:
        - name: user_id
          in: path
          required: true
          description: The unique identifier of the user whose profile is being requested.
          schema:
            type: string
            example: "user123"
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_me:
                    type: boolean
                    description: Indicates if the viewer is the profile owner.
                    example: true
                  bio:
                    type: object
                    description: The user's bio information.
                    properties:
                      first_name:
                        type: string
                        example: "John"
                      last_name:
                        type: string
                        example: "Doe"
                      headline:
                        type: string
                        example: "Software Engineer"
                      experience:
                        type: array
                        items:
                          type: string
                        example: ["Google", "Microsoft"]
                      education:
                        type: array
                        items:
                          type: string
                        example: ["MIT", "Stanford"]
                      website:
                        type: string
                        example: "https://johndoe.com"
                      contact_info:
                        type: object
                        properties:
                          phone_number:
                            type: string
                            example: "1234567890"
                          country_code:
                            type: string
                            example: "+1"
                          phone_type:
                            type: string
                            example: "Mobile"
                          address:
                            type: string
                            example: "123 Main St"
                          birthday:
                            type: string
                            format: date
                            example: "1990-01-01"
                          website:
                            type: string
                            example: "https://johndoe.com"
                      location:
                        type: object
                        properties:
                          country_region:
                            type: string
                            example: "USA"
                          city:
                            type: string
                            example: "San Francisco"
                  education:
                    type: array
                    description: The user's education details.
                    items:
                      type: string
                    example: []
                  experience:
                    type: array
                    description: The user's work experience.
                    items:
                      type: string
                    example: []
                  skills:
                    type: array
                    description: The user's skills.
                    items:
                      type: string
                    example: []
                  licenses:
                    type: array
                    description: The user's licenses and certifications.
                    items:
                      type: string
                    example: []
                  posts:
                    type: array
                    description: The user's most recent posts.
                    items:
                      type: object
                    example: []
                  comments:
                    type: array
                    description: The user's most recent comments.
                    items:
                      type: object
                    example: []
                  reacted:
                    type: array
                    description: The user's most recent reacted posts.
                    items:
                      type: object
                    example: []
                  profile_photo:
                    type: string
                    description: The URL of the user's profile photo.
                    example: "https://example.com/profile_photo.jpg"
                  cover_photo:
                    type: string
                    description: The URL of the user's cover photo.
                    example: "https://example.com/cover_photo.jpg"
                  resume:
                    type: string
                    description: The URL of the user's resume.
                    example: "https://example.com/resume.pdf"
        '400':
          description: Invalid user ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user ID format."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are blocked from viewing this profile."
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user profile"

  