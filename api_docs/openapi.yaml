openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user (Local)
      description: >
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user (Local)
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error

  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email.
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
        '500':
          description: Server error

  /api/v1/user/verify-otp:
    post:
      tags:
        - OTP
      summary: Verify OTP
      description: >
        Verifies the one-time password (OTP) provided by the user.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - otp
                - email
              properties:
                otp:
                  type: string
                  example: "123456"
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP verified successfully"
        '400':
          description: OTP is required.
        '401':
          description: Invalid OTP or OTP expired.
        '500':
          description: Server error

  /api/v1/user/verify-email:
    post:
      tags:
        - Auth
      summary: Verify Email Availability
      description: >
        Checks if the provided email is available (i.e., not already in use).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Email is available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is available"
        '400':
          description: Email already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email already exists"
        '500':
          description: Server error

  /api/v1/user/signup/starter:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Registers a new user by creating an account with the provided starter information.
        Required fields include firstName, lastName, email, password, country, and city.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
                - country
                - city
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "securepassword"
                country:
                  type: string
                  example: "USA"
                city:
                  type: string
                  example: "New York"
                isStudent:
                  type: boolean
                  example: false
                jobTitle:
                  type: string
                  example: "Software Engineer"
                school:
                  type: string
                  example: "MIT"
                schoolStartYear:
                  type: number
                  example: 2015
                schoolEndYear:
                  type: number
                  example: 2019
                is16OrAbove:
                  type: boolean
                  example: true
                birthDate:
                  type: string
                  format: date
                  example: "1990-01-01"
                employmentType:
                  type: string
                  example: "Full-time"
                recentCompany:
                  type: string
                  example: "Google"
      responses:
        '201':
          description: Signup successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "john.doe@example.com"
        '400':
          description: Required fields missing.
        '409':
          description: User already exists.
        '500':
          description: Server error

  /api/v1/user/forget-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: >
        Sends a password reset link to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset link sent.
        '400':
          description: Invalid email format.
        '404':
          description: Email not registered.
        '500':
          description: Server error
  /api/v1/user/reset-password:
    patch:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "new_password"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "New password is required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old password is incorrect"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/validate-token:
    get:
      tags:
        - Auth
      summary: Validate token and user
      description: >
        Validates the provided token and retrieves the user information.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      responses:
        '200':
          description: Validate token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validate token successful"
                  success:
                    type: boolean
                    example: true
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
                  success:
                    type: boolean
                    example: false
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  success:
                    type: boolean
                    example: false
  /api/v1/user/update-password:
    patch:
      tags:
        - Auth
      summary: Update password
      description: >
        Updates the user's password using the provided old password, new password, and token.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - old_password
                - new_password
              properties:
                old_password:
                  type: string
                  example: "old_password"
                new_password:
                  type: string
                  example: "new_password"
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "passwords are required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Old password is incorrect"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/update-email:
    put:
      tags:
        - User
      summary: Update user email
      description: >
        Updates the email address of an authenticated user. A valid token is required to verify the user's identity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
              properties:
                email:
                  type: string
                  example: "new.email@example.com"
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Email updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated successfully"
                  user_updated_email:
                    type: string
                    example: "new.email@example.com"
        '400':
          description: Email is required.
        '401':
          description: Email already exists or invalid token.
        '500':
          description: Server error.
  /api/v1/user/delete-account:
    delete:
      tags:
        - User
      summary: Delete User Account
      description: >
        Deletes the authenticated user's account from the system.
        A valid token is required to verify the user's identity.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "jwt_token"
      responses:
        '200':
          description: Account deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Account deleted successfully"
        '400':
          description: Invalid request.
        '401':
          description: Unauthorized or invalid token.
        '500':
          description: Server error
                    example: "Server error"
  /profile/profile-picture/{user_id}:
    post:
      tags:
        - Profile Picture
      summary: Upload a profile picture
      description: Uploads a profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded and updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error uploading profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error uploading profile picture
                  error:
                    type: string
                    example: Database error
    put:
      tags:
        - Profile Picture
      summary: Update a profile picture
      description: Updates the profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating profile picture
                  error:
                    type: string
                    example: Database error
    delete:
      tags:
        - Profile Picture
      summary: Delete a profile picture
      description: Deletes the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture deleted successfully"
        '400':
          description: No profile picture to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No profile picture to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this profile picture"
        '500':
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting profile picture"
                  error:
                    type: string
                    example: "Cloudinary error"
    get:
      tags:
        - Profile Picture
      summary: Get a profile picture
      description: Retrieves the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "https://cloudinary.com/user/profile_picture.jpg"
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving profile picture"
                  error:
                    type: string
                    example: "Database error"
  /profile/cover-photo/{user_id}:
    post:
      tags:
        - Cover Photo
      summary: Upload a cover photo
      description: Uploads a new cover photo for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Cover photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo uploaded and updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Cover Photo
      summary: Update a cover photo
      description: Updates the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new image file to upload.
      responses:
        '200':
          description: Cover photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/new_cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this cover photo."
        '500':
          description: Error updating cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Cover Photo
      summary: Delete a cover photo
      description: Deletes the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo deleted successfully"
        '400':
          description: No cover photo to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No cover photo to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this cover photo."
        '500':
          description: Error deleting cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    get:
      tags:
        - Cover Photo
      summary: Get a cover photo
      description: Retrieves the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '404':
          description: Cover photo not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving cover photo"
                  error:
                    type: string
                    example: "Database error"
  /profile/resume/{user_id}:
    post:
      tags:
        - Resume
      summary: Upload a resume
      description: Uploads a new resume for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The PDF file to upload.
      responses:
        '200':
          description: Resume uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume uploaded and updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Resume
      summary: Update a resume
      description: Updates the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The new PDF file to upload.
      responses:
        '200':
          description: Resume updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/new_resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this resume."
        '500':
          description: Error updating resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
        tags:
          - Resume
        summary: Delete a resume
        description: Deletes the user's resume.
        parameters:
          - name: user_id
            in: path
            required: true
            schema:
              type: string
            description: The ID of the user
        responses:
          '200':
            description: Resume deleted successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Resume deleted successfully"
          '400':
            description: No resume to delete.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "No resume to delete"
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Unauthorized"
          '403':
            description: You are not authorized to delete this resume.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "You are not authorized to delete this resume."
          '500':
            description: Error deleting resume
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Error deleting resume"
                    error:
                      type: string
                      example: "Cloudinary error"

    get:
        tags:
          - Resume
        summary: Get a resume
        description: Retrieves the user's resume.
        parameters:
          - name: user_id
            in: path
            required: true
            schema:
              type: string
            description: The ID of the user
        responses:
          '200':
            description: Resume retrieved successfully.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    resume:
                      type: string
                      example: "https://cloudinary.com/user/resume.pdf"
          '404':
            description: Resume not found.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string

                      example: "Resume not found"
          '401':
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Unauthorized"

          '403':
            description: Access denied

          '500':
            description: Error retrieving resume
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Error retrieving resume"
                    error:
                      type: string
                      example: "Database error"
  /api/v1/user/update-username:
    patch:
      tags:
        - Auth
      summary: Update username
      description: >
        Updates the user's username using the provided token and new username.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_username
              properties:
                new_username:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User name updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "new username is required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username already in use"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/privacy/profile-visibility/{user_id}:
    get:
      tags:
        - Privacy Settings
      summary: Get profile visibility
      description: Retrieves the profile visibility setting for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose profile visibility is being retrieved.
      responses:
        '200':
          description: Profile visibility retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  profileVisibility:
                    type: string
                    example: "Public"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: User is not authorized to access this profile visibility.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authorized to access this profile visibility."
        '404':
          description: User not found or privacy settings not available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User does not have privacy settings."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving privacy settings"
                  error:
                    type: string
                    example: "Database error"

    put:
      tags:
        - Privacy Settings
      summary: Update profile visibility
      description: Updates the profile visibility setting for the specified user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user whose profile visibility is being updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profileVisibility:
                  type: string
                  description: The new profile visibility setting.
                  enum:
                    - Public
                    - Private
                  example: "Private"
      responses:
        '200':
          description: Profile visibility updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile visibility updated successfully"
                  profileVisibility:
                    type: string
                    example: "Private"
        '400':
          description: Invalid profile visibility setting.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid profile visibility setting"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: User is not authorized to update this profile visibility.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authorized to update this profile visibility."
        '404':
          description: User not found or privacy settings not available.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User does not have privacy settings."
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating privacy settings"
                  error:
                    type: string
                    example: "Database error"
  /api/v1/user/update-user-profile:
    put:
      tags:
        - User Profile
      summary: Update user profile
      description: >
        Updates the authenticated user's profile information such as bio, industry, 
        profile photo, cover photo, resume and contact information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                  example: "Experienced software engineer specializing in web development"
                industry:
                  type: string
                  example: "Technology"
                profile_photo:
                  type: string
                  example: "https://example.com/profile_photo.jpg"
                cover_photo:
                  type: string
                  example: "https://example.com/cover_photo.jpg"
                resume:
                  type: string
                  example: "https://example.com/resume.pdf"
                phone_number:
                  type: string
                  example: "1234567890"
                country_code:
                  type: string
                  example: "+1"
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User profile updated successfully"
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
                      bio:
                        type: string
                        example: "Experienced software engineer specializing in web development"
                      industry:
                        type: string
                        example: "Technology"
                      profile_photo:
                        type: string
                        example: "https://example.com/profile_photo.jpg"
                      cover_photo:
                        type: string
                        example: "https://example.com/cover_photo.jpg"
                      resume:
                        type: string
                        example: "https://example.com/resume.pdf"
                      phone_number:
                        type: string
                        example: "1234567890"
                      country_code:
                        type: string
                        example: "+1"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Error updating user profile"
                    
  /api/v1/user/add-work-experience:
    post:
      tags:
        - User Profile
      summary: Add work experience
      description: Adds a new work experience entry to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - organization
              properties:
                title:
                  type: string
                  example: "Software Engineer"
                employee_type:
                  type: string
                  example: "Full-time"
                organization:
                  type: string
                  example: "60d0fe4f5311236168a109ca"
                  description: "MongoDB ObjectId of the organization"
                is_current:
                  type: boolean
                  example: true
                start_date:
                  type: string
                  format: date
                  example: "2020-01-15"
                end_date:
                  type: string
                  format: date
                  example: "2023-05-30"
                location:
                  type: string
                  example: "San Francisco, CA"
                description:
                  type: string
                  example: "Developed scalable web applications using React and Node.js"
                location_type:
                  type: string
                  example: "Remote"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["JavaScript", "React", "Node.js"]
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                        example: "https://example.com/project-screenshot.jpg"
                      title:
                        type: string
                        example: "Project Screenshot"
                      description:
                        type: string
                        example: "Screenshot of the dashboard I developed"
      responses:
        '200':
          description: Work experience added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Work experience added successfully"
                  experience:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109cb"
                      title:
                        type: string
                        example: "Software Engineer"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding work experience"

  /api/v1/user/update-work-experience/{experienceId}:
    put:
      tags:
        - User Profile
      summary: Update work experience
      description: Updates an existing work experience entry in the user's profile
      parameters:
        - name: experienceId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the work experience to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Senior Software Engineer"
                employee_type:
                  type: string
                  example: "Full-time"
                organization:
                  type: string
                  example: "60d0fe4f5311236168a109ca"
                  description: "MongoDB ObjectId of the organization"
                is_current:
                  type: boolean
                  example: true
                start_date:
                  type: string
                  format: date
                  example: "2020-01-15"
                end_date:
                  type: string
                  format: date
                  example: "2023-05-30"
                location:
                  type: string
                  example: "San Francisco, CA"
                description:
                  type: string
                  example: "Developed scalable web applications using React and Node.js"
                location_type:
                  type: string
                  example: "Remote"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["JavaScript", "React", "Node.js", "TypeScript"]
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                      title:
                        type: string
                      description:
                        type: string
      responses:
        '200':
          description: Work experience updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Work experience updated successfully"
                  experience:
                    type: object
        '401':
          description: Unauthorized
        '404':
          description: Experience not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Experience not found"
        '500':
          description: Server error

  /api/v1/user/delete-work-experience/{experienceId}:
    delete:
      tags:
        - User Profile
      summary: Delete work experience
      description: Deletes a work experience entry from the user's profile
      parameters:
        - name: experienceId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the work experience to delete
      responses:
        '200':
          description: Work experience deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Work experience deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: Work Experience not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Work Experience not found"
        '500':
          description: Server error
  
  /api/v1/user/add-education:
    post:
      tags:
        - User Profile
      summary: Add education entry
      description: Adds a new education entry to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - school
              properties:
                school:
                  type: string
                  example: "60d0fe4f5311236168a109ca"
                  description: "MongoDB ObjectId of the school or university"
                degree:
                  type: string
                  example: "Bachelor of Science"
                field_of_study:
                  type: string
                  example: "Computer Science"
                start_date:
                  type: string
                  format: date
                  example: "2018-09-01"
                end_date:
                  type: string
                  format: date
                  example: "2022-06-30"
                grade:
                  type: string
                  example: "3.8 GPA"
                activites_and_socials:
                  type: string
                  example: "Coding Club, Student Government"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["JavaScript", "Python", "Data Structures"]
                description:
                  type: string
                  example: "Studied computer science with focus on software engineering."
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                        example: "https://example.com/diploma.jpg"
                      title:
                        type: string
                        example: "Diploma"
                      description:
                        type: string
                        example: "My university diploma"
      responses:
        '200':
          description: Education entry added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Education entry added successfully"
                  education:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109cb"
                      school:
                        type: string
                        example: "60d0fe4f5311236168a109ca"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error adding education entry"

  /api/v1/user/update-education/{educationId}:
    put:
      tags:
        - User Profile
      summary: Update education entry
      description: Updates an existing education entry in the user's profile
      parameters:
        - name: educationId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the education entry to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                school:
                  type: string
                  example: "60d0fe4f5311236168a109ca"
                degree:
                  type: string
                  example: "Bachelor of Science"
                field_of_study:
                  type: string
                  example: "Computer Engineering"
                start_date:
                  type: string
                  format: date
                  example: "2018-09-01"
                end_date:
                  type: string
                  format: date
                  example: "2022-06-30"
                grade:
                  type: string
                  example: "4.0 GPA"
                activites_and_socials:
                  type: string
                  example: "Robotics Club, Hackathons"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["JavaScript", "React", "Node.js", "TypeScript"]
                description:
                  type: string
                  example: "Specialized in software architecture and web development."
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                        example: "https://example.com/updated-diploma.jpg"
                      title:
                        type: string
                        example: "Updated Diploma"
                      description:
                        type: string
                        example: "My updated university diploma"
      responses:
        '200':
          description: Education entry updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Education entry updated successfully"
                  education:
                    type: object
        '401':
          description: Unauthorized
        '404':
          description: Education entry not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Education entry not found"
        '500':
          description: Server error

  /api/v1/user/delete-education/{educationId}:
    delete:
      tags:
        - User Profile
      summary: Delete education entry
      description: Deletes an education entry from the user's profile
      parameters:
        - name: educationId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the education entry to delete
      responses:
        '200':
          description: Education entry deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Education entry deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: Education entry not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Education entry not found"
        '500':
          description: Server error
  /api/v1/user/add-license:
    post:
      tags:
        - User Profile
      summary: Add license or certification
      description: Adds a new license or certification to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - issuing_organization
              properties:
                name:
                  type: string
                  example: "AWS Certified Solutions Architect"
                issuing_organization:
                  type: string
                  example: "60d0fe4f5311236168a109cb"
                  description: "MongoDB ObjectId of the issuing organization"
                issue_date:
                  type: string
                  format: date
                  example: "2023-01-15"
                expiration_date:
                  type: string
                  format: date
                  example: "2026-01-15"
                credintial_id:
                  type: integer
                  example: 12345678
                credintial_url:
                  type: string
                  example: "https://aws.amazon.com/verification/12345678"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["AWS", "Cloud Architecture"]
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                        example: "https://example.com/certification.pdf"
                      title:
                        type: string
                        example: "AWS Certification"
                      description:
                        type: string
                        example: "My AWS Solutions Architect certification"
      responses:
        '200':
          description: License/Certificate added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "License/Certificate added successfully"
                  license:
                    type: object
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-license/{licenseId}:
    put:
      tags:
        - User Profile
      summary: Update license or certification
      description: Updates an existing license or certification in the user's profile
      parameters:
        - name: licenseId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the license or certification to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "AWS Certified Solutions Architect - Professional"
                issuing_organization:
                  type: string
                  example: "60d0fe4f5311236168a109cb"
                issue_date:
                  type: string
                  format: date
                  example: "2023-01-15"
                expiration_date:
                  type: string
                  format: date
                  example: "2026-01-15"
                credintial_id:
                  type: integer
                  example: 12345678
                credintial_url:
                  type: string
                  example: "https://aws.amazon.com/verification/12345678"
                skills:
                  type: array
                  items:
                    type: string
                  example: ["AWS", "Cloud Architecture", "DevOps"]
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      media:
                        type: string
                      title:
                        type: string
                      description:
                        type: string
      responses:
        '200':
          description: License/Certificate updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "License/Certificate updated successfully"
                  license:
                    type: object
        '401':
          description: Unauthorized
        '404':
          description: License/Certificate not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "License/Certificate not found"
        '500':
          description: Server error

  /api/v1/user/delete-license/{licenseId}:
    delete:
      tags:
        - User Profile
      summary: Delete license or certification
      description: Deletes a license or certification from the user's profile
      parameters:
        - name: licenseId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the license or certification to delete
      responses:
        '200':
          description: License/Certificate deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "License/Certificate deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: License/Certificate not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "License/Certificate not found"
        '500':
          description: Server error
  /api/v1/user/hash-password:
    get:
      tags:
        - Auth
      summary: Generate a random hashed password
      description: >
        Generates a random password and returns its SHA-256 hash.
        This can be used for testing or generating secure passwords.
      responses:
        '200':
          description: Successfully generated hashed password
          content:
            application/json:
              schema:
                type: object
                properties:
                  hashedPassword:
                    type: string
                    example: "7e2d58d8b5b08c252e7d93bbc873fe5ba56dba06ec5a03776e7b4b1cf5072574"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/add-skill:
    post:
      tags:
        - User Profile
      summary: Add skill
      description: Adds a new skill to the user's profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "JavaScript"
                used_where:
                  type: array
                  items:
                    type: string
                  example: ["60d0fe4f5311236168a109ca", "60d0fe4f5311236168a109cb"]
                  description: "Array of organization IDs where this skill was used"
      responses:
        '200':
          description: Skill added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill added successfully"
                  skill:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "60d0fe4f5311236168a109cc"
                      name:
                        type: string
                        example: "JavaScript"
                      endorsments:
                        type: array
                        items:
                          type: string
                        example: []
                      used_where:
                        type: array
                        items:
                          type: string
                        example: ["60d0fe4f5311236168a109ca"]
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/v1/user/update-skill/{skillId}:
    put:
      tags:
        - User Profile
      summary: Update skill
      description: Updates an existing skill in the user's profile
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the skill to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "JavaScript/TypeScript"
                used_where:
                  type: array
                  items:
                    type: string
                  example: ["60d0fe4f5311236168a109ca", "60d0fe4f5311236168a109cb"]
      responses:
        '200':
          description: Skill updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill updated successfully"
                  skill:
                    type: object
        '401':
          description: Unauthorized
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill not found"
        '500':
          description: Server error

  /api/v1/user/delete-skill/{skillId}:
    delete:
      tags:
        - User Profile
      summary: Delete skill
      description: Deletes a skill from the user's profile
      parameters:
        - name: skillId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the skill to delete
      responses:
        '200':
          description: Skill deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill deleted successfully"
        '401':
          description: Unauthorized
        '404':
          description: Skill not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Skill not found"
        '500':
          description: Server error
