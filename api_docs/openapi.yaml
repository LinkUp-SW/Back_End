openapi: 3.0.0
info:
  title: Linkup API Docs
  version: 1.0.0
  description: API for Linkup project.
  contact:
    name: Linkup Team
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs in a user (Local)
      description: >
        Authenticates a user using email and password. On successful authentication, a JWT token is generated,
        set as an HTTP-only cookie, and user details are returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "valid_password"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
        '400':
          description: Email and password are required
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out a user (Local)
      description: >
        Clears the JWT cookie to log out the user.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"

  /auth/google:
    get:
      tags:
        - Google Auth
      summary: Initiates Google authentication
      description: >
        Redirects the user to Google to initiate OAuth2 authentication.
      responses:
        '302':
          description: Redirects to Google for authentication.

  /auth/google/callback:
    get:
      tags:
        - Google Auth
      summary: Google OAuth callback
      description: >
        Handles the callback from Google OAuth. On successful authentication, a JWT token is issued,
        set as an HTTP-only cookie, and user details are returned.
      responses:
        '200':
          description: Google authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google authentication successful"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "unique_user_id"
                      email:
                        type: string
                        example: "user@example.com"
                  tokens:
                    type: object
                    description: Google tokens stored in session (if applicable)
        '401':
          description: Google authentication failed
        '500':
          description: Server error

  /auth/google/logout:
    get:
      tags:
        - Google Auth
      summary: Logs out a Google authenticated user
      description: >
        Revokes the Google access token (if applicable), destroys the session, and clears the JWT cookie.
      responses:
        '200':
          description: Google logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Google logout successful"
        '500':
          description: Server error

  /api/v1/user/send-otp:
    post:
      tags:
        - OTP
      summary: Generate and send OTP
      description: >
        Generates a one-time password (OTP) and sends it to the user's email.
        The OTP is stored in the session and expires in 10 minutes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "test@example.com"
      responses:
        '200':
          description: OTP has been sent to your email.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP has been sent to your email"
        '400':
          description: Email is required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is required"
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Server error"
  /api/v1/user/verify-otp:
    post:
      tags:
        - Auth
      summary: Register a New User (Starter)
      description: >
        Verifies the one-time password (OTP) provided by the user. Requires email and OTP.
        If the OTP is valid and not expired, the session values are cleared and a success message is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: "test@example.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Password reset link sent.
        '400':
          description: Invalid email format.
        '404':
          description: Email not registered.
        '500':
          description: Server error
  /api/v1/user/reset-password:
    patch:
      tags:
        - Auth
      summary: Reset password
      description: >
        Resets the user's password using the provided token and new password.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            example: "Bearer jwt_token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  example: "new_password"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          description: Email and OTP are required.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email and OTP are required"
        '401':
          description: Invalid OTP or OTP expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid OTP"
  /api/v1/user/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: >
        Registers a new user by creating an account with the provided email, password, and optional name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                email:
                  type: string
                  example: "newuser@example.com"
                password:
                  type: string
                  example: "securepassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '201':
          description: Signup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: "newuser@example.com"
        '400':
          description: Email or Username and password are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or Username and password are required"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User already exists"
        '500':
          description: Server error
                    example: "Server error"

  /profile/profile-picture/{user_id}:
    post:
      tags:
        - Profile Picture
      summary: Upload a profile picture
      description: Uploads a profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture uploaded and updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture uploaded and updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error uploading profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error uploading profile picture
                  error:
                    type: string
                    example: Database error
    put:
      tags:
        - Profile Picture
      summary: Update a profile picture
      description: Updates the profile picture for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile picture updated successfully
                  profilePicture:
                    type: string
                    example: https://res.cloudinary.com/test/image/upload/sample.jpg
        '400':
          description: No file uploaded or invalid file type. Only image files are allowed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded or invalid file type. Only image files are allowed.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized to upload for this user.
        '500':
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error updating profile picture
                  error:
                    type: string
                    example: Database error
    delete:
      tags:
        - Profile Picture
      summary: Delete a profile picture
      description: Deletes the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture deleted successfully"
        '400':
          description: No profile picture to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No profile picture to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this profile picture"
        '500':
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting profile picture"
                  error:
                    type: string
                    example: "Cloudinary error"
    get:
      tags:
        - Profile Picture
      summary: Get a profile picture
      description: Retrieves the user's profile picture.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Profile picture retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "https://cloudinary.com/user/profile_picture.jpg"
        '404':
          description: Profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving profile picture"
                  error:
                    type: string
                    example: "Database error"
  /profile/cover-photo/{user_id}:
    post:
      tags:
        - Cover Photo
      summary: Upload a cover photo
      description: Uploads a new cover photo for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The image file to upload.
      responses:
        '200':
          description: Cover photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo uploaded and updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Cover Photo
      summary: Update a cover photo
      description: Updates the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                coverPhoto:
                  type: string
                  format: binary
                  description: The new image file to upload.
      responses:
        '200':
          description: Cover photo updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo updated successfully"
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/new_cover_photo.jpg"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only image files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this cover photo."
        '500':
          description: Error updating cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    delete:
      tags:
        - Cover Photo
      summary: Delete a cover photo
      description: Deletes the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo deleted successfully"
        '400':
          description: No cover photo to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No cover photo to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this cover photo.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this cover photo."
        '500':
          description: Error deleting cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting cover photo"
                  error:
                    type: string
                    example: "Cloudinary error"

    get:
      tags:
        - Cover Photo
      summary: Get a cover photo
      description: Retrieves the user's cover photo.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Cover photo retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coverPhoto:
                    type: string
                    example: "https://cloudinary.com/user/cover_photo.jpg"
        '404':
          description: Cover photo not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cover photo not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '500':
          description: Error retrieving cover photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving cover photo"
                  error:
                    type: string
                    example: "Database error"
  /profile/resume/{user_id}:
    post:
      tags:
        - Resume
      summary: Upload a resume
      description: Uploads a new resume for the user.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The PDF file to upload.
      responses:
        '200':
          description: Resume uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume uploaded and updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to upload for this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to upload for this user."
        '500':
          description: Error uploading resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading resume"
                  error:
                    type: string
                    example: "Cloudinary error"

    put:
      tags:
        - Resume
      summary: Update a resume
      description: Updates the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
                  description: The new PDF file to upload.
      responses:
        '200':
          description: Resume updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume updated successfully"
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/new_resume.pdf"
        '400':
          description: No file uploaded or invalid file type.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No file uploaded or invalid file type. Only .pdf files are allowed."
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to update this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to update this resume."
        '500':
          description: Error updating resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating resume"
                  error:
                    type: string
                    example: "Cloudinary error"

  delete:
      tags:
        - Resume
      summary: Delete a resume
      description: Deletes the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Resume deleted successfully"
        '400':
          description: No resume to delete.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No resume to delete"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: You are not authorized to delete this resume.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to delete this resume."
        '500':
          description: Error deleting resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting resume"
                  error:
                    type: string
                    example: "Cloudinary error"

  get:
      tags:
        - Resume
      summary: Get a resume
      description: Retrieves the user's resume.
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user
      responses:
        '200':
          description: Resume retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  resume:
                    type: string
                    example: "https://cloudinary.com/user/resume.pdf"
        '404':
          description: Resume not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Resume not found"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"

        '403':
          description: Access denied

        '500':
          description: Error retrieving resume
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error retrieving resume"
                  error:
                    type: string
                    example: "Database error"
  /api/v1/user/update-username:
    post:
      tags:
        - Auth
      summary: Update username
      description: >
        Updates the user's username using the provided token and new username.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_username
              properties:
                token:
                  type: string
                  example: "jwt_token"
                new_username:
                  type: string
                  example: "new_username"
      responses:
        '200':
          description: Username updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username updated successfully"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token and new username are required"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid or expired token"
        '403':
          description: Username already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Username already in use"

        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

                    example: "Server error"
